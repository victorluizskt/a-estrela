from collections import deque
 # 6,5,4,13 28.8

distancia_total = 0

heuristica = {
    '1':0.,'2':10.,'3':18.5,'4':24.8,'5':36.4,'6':38.8,'7':35.8,'8':25.4,'9':17.6,'10':9.1,'11':16.7,'12':27.3,'13':27.6,'14':29.8,
    '1':10.,'2':0.,'3':8.5,'4':14.8,'5':26.6,'6':29.1,'7':26.1,'8':17.3,'9':10.,'10':3.5,'11':15.5,'12':20.9,'13':19.1,'14':21.8,
    '1':18.5,'2':8.5,'3':0.,'4':6.3,'5':18.2,'6':20.6,'7':17.6,'8':13.6,'9':9.4,'10':10.3,'11':19.5,'12':19.1,'13':12.1,'14':16.6,
    '1':24.8,'2':14.8,'3':6.3,'4':0.,'5':12.,'6':14.4,'7':11.5,'8':12.4,'9':12.6,'10':16.7,'11':23.6,'12':18.6,'13':10.6,'14':15.4,
    '1':36.4,'2':26.6,'3':18.2,'4':12.,'5':0.,'6':3.,'7': 2.4,'8':19.4,'9':23.3,'10':28.2,'11':34.2,'12':24.8,'13':14.5,'14':17.9,
    '1':38.8,'2':29.1,'3':20.6,'4':14.4,'5':3.,'6':0.,'7':3.3,'8':22.3,'9':25.7,'10':30.3,'11':36.7,'12':27.6,'13':15.2,'14':18.2,
    '1':35.8,'2':26.1,'3':17.6,'4':11.5,'5':2.4,'6':3.3,'7':0.,'8':20.,'9':23.,'10':27.3,'11':34.2,'12':25.7,'13':12.4,'14':15.6,
    '1':25.4,'2':17.3,'3':13.6,'4':12.4,'5':19.4,'6':22.3,'7':20.,'8':0.,'9':8.2,'10':20.3,'11':16.1,'12':6.4,'13':22.7,'14':27.6,
    '1':17.6,'2':10.,'3':9.4,'4':12.6,'5':23.3,'6':25.7,'7':23.,'8':8.2,'9':0.,'10':13.5,'11':11.2,'12':10.9,'13':21.2,'14':26.6,
    '1':9.1,'2':3.5,'3':10.3,'4':16.7,'5':28.2,'6':30.3,'7':27.3,'8':20.3,'9':13.5,'10':0.,'11':17.6,'12':24.2,'13':18.7,'14':21.2,
    '1':16.7,'2':15.5,'3':19.5,'4':23.6,'5':34.2,'6':36.7,'7':34.2,'8':16.1,'9':11.2,'10':17.6,'11':0.,'12':14.2,'13':31.5,'14':35.5,
    '1':27.3,'2':20.9,'3':19.1,'4':18.6,'5':24.8,'6':27.6,'7':25.7,'8':6.4,'9':10.9,'10':24.2,'11':14.2,'12':0.,'13':28.8,'14':33.6,
    '1':27.6,'2':19.1,'3':12.1,'4':10.6,'5':14.5,'6':15.2,'7':12.4,'8':22.7,'9':21.2,'10':18.7,'11':31.5,'12':28.8,'13':0.,'14':5.1,
    '1':29.8,'2':21.8,'3':16.6,'4':15.4,'5':17.9,'6':18.2,'7':15.6,'8':27.6,'9':26.6,'10':21.2,'11':35.5,'12':33.6,'13':5.1,'14':0
}

distancia_real = {
    '1':[('2',10.)],
    '2':[('1',10.),('3',8.5),('9',10.),('10',3.5)],
    '3':[('2',8.5),('4',6.3),('9',9.4),('13',18.7)],
    '4':[('3',6.3),('5',13.),('8',15.3),('13',12.8)],
    '5':[('4',13.),('6',3),('7',2.4),('8',30.)],
    '6':[('5',3)],
    '7':[('5',2.4)],
    '8':[('4',15.3),('5',30.),('9',9.6),('12',6.4)],
    '9':[('2',10.),('3',9.4),('8',9.6),('11',12.2)],
    '10':[('2',3.5)],
    '11':[('9',12.2)],
    '12':[('8',6.4)],
    '13':[('3',18.7),('4',12.8),('14',5.1)],
    '14':[('13',5.1)]
}

class Graph:
    def __init__(self, lista_adjacente):
        self.lista_adjacente = lista_adjacente
 
    def get_neighbors(self, v):
        return self.lista_adjacente[v]
 
    def h(self, n):
        return heuristica[n]
 
    def a_star_algorithm(self, inicio, fim):
        inicia_lista = set([inicio])
        finaliza_lista = set([])
 
        lista_real = {}
        lista_real[inicio] = 0
 
        par = {}
        par[inicio] = inicio
 
        while len(inicia_lista) > 0:
            n = None
 
            for v in inicia_lista:
                if n == None or lista_real[v] + self.h(v) < lista_real[n] + self.h(n):
                    distancia_total = lista_real[v]
                    n = v;
 
            if n == None:
                print('Caminho não encontrado!')
                return None
 
            if n == fim:
                caminho_construido = []
 
                while par[n] != n:
                    caminho_construido.append(n)
                    n = par[n]
 
                caminho_construido.append(inicio)
                caminho_construido.reverse()

                print('Caminho percorrido: {}'.format(caminho_construido))
                print('Menor distancia: {}'.format(distancia_total))
                return caminho_construido
 
            for (m, largura) in self.get_neighbors(n):
                if m not in inicia_lista and m not in finaliza_lista:
                    inicia_lista.add(m)
                    par[m] = n
                    lista_real[m] = lista_real[n] + largura
 
                else:
                    if lista_real[m] > lista_real[n] + largura:
                        lista_real[m] = lista_real[n] + largura
                        par[m] = n
 
                        if m in finaliza_lista:
                            finaliza_lista.remove(m)
                            inicia_lista.add(m)
 
            inicia_lista.remove(n)
            finaliza_lista.add(n)
 
        print('Caminho não existe!')
        return None

graph1 = Graph(distancia_real)
graph1.a_star_algorithm('6', '13')